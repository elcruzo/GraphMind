apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: graphmind
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: graphmind
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: graphmind
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    rule_files:
      - "graphmind_rules.yml"
    
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - alertmanager:9093
    
    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']
    
    - job_name: 'graphmind-nodes'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - graphmind
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
    
    - job_name: 'redis'
      static_configs:
      - targets: ['redis-service:6379']
      
    - job_name: 'kubernetes-nodes'
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics
  
  graphmind_rules.yml: |
    groups:
    - name: graphmind
      rules:
      - alert: GraphMindNodeDown
        expr: up{job="graphmind-nodes"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "GraphMind node {{ $labels.kubernetes_pod_name }} is down"
          description: "Node {{ $labels.kubernetes_pod_name }} has been down for more than 1 minute."
      
      - alert: HighConsensusLatency
        expr: graphmind_consensus_latency_p95 > 1000
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "High consensus latency on {{ $labels.kubernetes_pod_name }}"
          description: "P95 consensus latency is {{ $value }}ms on node {{ $labels.kubernetes_pod_name }}"
      
      - alert: ByzantineNodeDetected
        expr: increase(graphmind_byzantine_detections_total[5m]) > 0
        for: 0s
        labels:
          severity: critical
        annotations:
          summary: "Byzantine behavior detected"
          description: "Node {{ $labels.kubernetes_pod_name }} detected {{ $value }} Byzantine behaviors in the last 5 minutes"
      
      - alert: HighMemoryUsage
        expr: (container_memory_usage_bytes{pod=~"graphmind-nodes-.*"} / container_spec_memory_limit_bytes) > 0.9
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High memory usage on {{ $labels.pod }}"
          description: "Memory usage is above 90% on pod {{ $labels.pod }}"
      
      - alert: HighCPUUsage
        expr: (rate(container_cpu_usage_seconds_total{pod=~"graphmind-nodes-.*"}[5m]) / container_spec_cpu_quota) > 0.9
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High CPU usage on {{ $labels.pod }}"
          description: "CPU usage is above 90% on pod {{ $labels.pod }}"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: graphmind
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:v2.47.0
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus/'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--storage.tsdb.retention.time=200h'
        - '--web.enable-lifecycle'
        ports:
        - containerPort: 9090
        resources:
          requests:
            cpu: 200m
            memory: 1000Mi
          limits:
            cpu: 1
            memory: 2Gi
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/
        - name: prometheus-storage
          mountPath: /prometheus/
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: graphmind
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: standard
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: graphmind
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '9090'
spec:
  selector:
    app: prometheus
  type: NodePort
  ports:
  - port: 9090
    targetPort: 9090
    nodePort: 30000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: graphmind
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.1.0
        ports:
        - containerPort: 3000
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
          limits:
            cpu: 500m
            memory: 1Gi
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: admin-password
        - name: GF_INSTALL_PLUGINS
          value: grafana-kubernetes-app
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-dashboards
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          timeoutSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          timeoutSeconds: 10
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: graphmind
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: graphmind
spec:
  selector:
    app: grafana
  type: NodePort
  ports:
  - port: 3000
    targetPort: 3000
    nodePort: 32000
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-secrets
  namespace: graphmind
type: Opaque
data:
  admin-password: Z3JhcGhtaW5kX2FkbWlu  # base64: graphmind_admin
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: graphmind
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus-service:9090
      isDefault: true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: graphmind
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
    - name: 'graphmind'
      orgId: 1
      folder: 'GraphMind'
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /etc/grafana/provisioning/dashboards/graphmind
  
  graphmind-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "GraphMind Overview",
        "tags": ["graphmind", "consensus", "byzantine"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Active Nodes",
            "type": "stat",
            "targets": [
              {
                "expr": "count(up{job=\"graphmind-nodes\"} == 1)",
                "refId": "A"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 0
            }
          },
          {
            "id": 2,
            "title": "Consensus Latency",
            "type": "graph",
            "targets": [
              {
                "expr": "graphmind_consensus_latency_p95",
                "refId": "A",
                "legendFormat": "P95 Latency"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 12,
              "y": 0
            }
          },
          {
            "id": 3,
            "title": "Byzantine Detections",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(graphmind_byzantine_detections_total[5m])",
                "refId": "A",
                "legendFormat": "Detections per second"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 24,
              "x": 0,
              "y": 8
            }
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "5s"
      }
    }