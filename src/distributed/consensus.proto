/*
Protocol Buffer definitions for GraphMind distributed consensus

This file defines the gRPC service and message types for Byzantine fault-tolerant
consensus communication in the GraphMind distributed GNN system.

Author: Ayomide Caleb Adekoya
*/

syntax = "proto3";

package graphmind.consensus;

option go_package = "github.com/elcruzo/graphmind/consensus";
option java_package = "com.graphmind.consensus";
option java_outer_classname = "ConsensusProtos";

// Consensus message types
enum MessageType {
    UNKNOWN = 0;
    PREPARE = 1;
    PROMISE = 2;
    COMMIT = 3;
    VIEW_CHANGE = 4;
    NEW_VIEW = 5;
    HEARTBEAT = 6;
}

// Node status for health monitoring
enum NodeStatus {
    NODE_UNKNOWN = 0;
    NODE_JOINING = 1;
    NODE_ACTIVE = 2;
    NODE_UNHEALTHY = 3;
    NODE_LEAVING = 4;
    NODE_OFFLINE = 5;
}

// Topology proof structure for TA-BFT validation
message TopologyProof {
    string fingerprint = 1;
    double centrality_weight = 2;
    int64 timestamp = 3;
    map<string, double> neighbor_weights = 4;
}

// Core consensus message
message ConsensusMessage {
    MessageType msg_type = 1;
    int32 view = 2;
    int64 sequence = 3;
    bytes proposal = 4;  // Serialized proposal data
    string sender_id = 5;
    int64 timestamp = 6;
    TopologyProof topology_proof = 7;
    bytes signature = 8;
    map<string, string> metadata = 9;
}

// Consensus result for tracking outcomes
message ConsensusResult {
    bool decided = 1;
    bytes value = 2;
    int32 view = 3;
    int64 sequence = 4;
    int32 rounds = 5;
    map<string, int32> proof = 6;
    double execution_time = 7;
}

// Node information for discovery
message NodeInfo {
    string node_id = 1;
    string hostname = 2;
    int32 port = 3;
    bytes public_key = 4;
    NodeStatus status = 5;
    int64 last_seen = 6;
    double health_score = 7;
    double consensus_weight = 8;
    map<string, string> capabilities = 9;
    map<string, string> metadata = 10;
}

// Health check request/response
message HealthCheckRequest {
    string node_id = 1;
    int64 timestamp = 2;
}

message HealthCheckResponse {
    string node_id = 1;
    NodeStatus status = 2;
    double health_score = 3;
    int64 timestamp = 4;
    map<string, double> metrics = 5;
}

// Topology update messages
message TopologyUpdate {
    int64 version = 1;
    repeated string nodes = 2;
    repeated Edge edges = 3;
    string fingerprint = 4;
    int64 timestamp = 5;
}

message Edge {
    string source = 1;
    string target = 2;
    double weight = 3;
    map<string, string> attributes = 4;
}

// Model parameter synchronization
message ModelUpdate {
    string model_id = 1;
    int64 version = 2;
    bytes parameters = 3;  // Serialized model parameters
    double learning_rate = 4;
    int32 batch_size = 5;
    map<string, double> metrics = 6;
    string sender_id = 7;
    int64 timestamp = 8;
    bytes signature = 9;
}

message ModelSyncRequest {
    string model_id = 1;
    int64 current_version = 2;
    string requester_id = 3;
}

message ModelSyncResponse {
    string model_id = 1;
    repeated ModelUpdate updates = 2;
    bool success = 3;
    string error_message = 4;
}

// Byzantine detection and reporting
message ByzantineReport {
    string reporter_id = 1;
    string suspect_id = 2;
    string evidence_type = 3;
    bytes evidence = 4;
    double confidence = 5;
    int64 timestamp = 6;
    bytes signature = 7;
}

message ByzantineVerificationRequest {
    ByzantineReport report = 1;
    repeated string validators = 2;
}

message ByzantineVerificationResponse {
    string suspect_id = 1;
    bool is_byzantine = 2;
    repeated string voting_validators = 3;
    map<string, double> evidence_scores = 4;
}

// Service definitions
service ConsensusService {
    // Core consensus operations
    rpc ProposeValue(ConsensusMessage) returns (ConsensusResult);
    rpc SendMessage(ConsensusMessage) returns (MessageAck);
    rpc GetConsensusState(StateRequest) returns (ConsensusState);
    
    // Bidirectional streaming for real-time consensus
    rpc ConsensusStream(stream ConsensusMessage) returns (stream ConsensusMessage);
    
    // Health monitoring
    rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
    rpc MonitorHealth(HealthCheckRequest) returns (stream HealthCheckResponse);
    
    // Topology management
    rpc UpdateTopology(TopologyUpdate) returns (TopologyAck);
    rpc GetTopology(TopologyRequest) returns (TopologyUpdate);
    rpc SubscribeTopology(TopologyRequest) returns (stream TopologyUpdate);
}

service ModelSyncService {
    // Model parameter synchronization
    rpc SyncModel(ModelSyncRequest) returns (ModelSyncResponse);
    rpc UpdateModel(ModelUpdate) returns (ModelUpdateAck);
    rpc StreamModelUpdates(ModelSyncRequest) returns (stream ModelUpdate);
    
    // Model aggregation for federated learning
    rpc AggregateModels(ModelAggregationRequest) returns (ModelAggregationResponse);
}

service ByzantineDetectionService {
    // Byzantine fault detection and reporting
    rpc ReportByzantine(ByzantineReport) returns (ReportAck);
    rpc VerifyByzantine(ByzantineVerificationRequest) returns (ByzantineVerificationResponse);
    rpc GetByzantineReports(ByzantineQueryRequest) returns (ByzantineQueryResponse);
}

// Additional message types for service calls
message MessageAck {
    bool success = 1;
    string message = 2;
    int64 timestamp = 3;
}

message StateRequest {
    string node_id = 1;
    int64 since_sequence = 2;
}

message ConsensusState {
    int32 current_view = 1;
    int64 current_sequence = 2;
    repeated ConsensusResult decided_values = 3;
    map<string, int32> node_status = 4;
    int64 timestamp = 5;
}

message TopologyAck {
    bool success = 1;
    string message = 2;
    int64 version = 3;
}

message TopologyRequest {
    string requester_id = 1;
    int64 since_version = 2;
}

message ModelUpdateAck {
    bool success = 1;
    string message = 2;
    int64 version = 3;
}

message ModelAggregationRequest {
    string model_id = 1;
    repeated ModelUpdate updates = 2;
    string aggregation_method = 3;  // "fedavg", "byzantine_robust", etc.
    map<string, double> weights = 4;
    string requester_id = 5;
}

message ModelAggregationResponse {
    string model_id = 1;
    ModelUpdate aggregated_model = 2;
    map<string, double> contribution_weights = 3;
    bool success = 4;
    string error_message = 5;
}

message ReportAck {
    bool success = 1;
    string message = 2;
    string report_id = 3;
}

message ByzantineQueryRequest {
    string node_id = 1;
    int64 since_timestamp = 2;
    repeated string suspect_ids = 3;
}

message ByzantineQueryResponse {
    repeated ByzantineReport reports = 1;
    map<string, double> byzantine_scores = 2;
    int64 timestamp = 3;
}